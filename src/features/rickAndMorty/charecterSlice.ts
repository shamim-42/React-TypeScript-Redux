import { CharecterType } from './types';
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchCount, fetchCharechers } from './charecterAPI';



export interface CharecterState {
    status: 'idle' | 'loading' | 'failed';
    totalCharecterCount: number;
    allCharecters: CharecterType[];
}

const initialState: CharecterState = {
    status: 'idle',
    totalCharecterCount: 0,
    allCharecters: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchCharecterAsync = createAsyncThunk(
    'charecters/fetchCharecters',
    async (url: string) => {
        const response = await fetchCharechers();
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const charecterSlice = createSlice({
    name: 'charecters',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        increment: (state) => {
            state.totalCharecterCount += 1;
        },
    },
    // // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //     builder
    //         .addCase(fetchCharecterAsync.pending, (state) => {
    //             state.status = 'loading';
    //         })
    //         .addCase(fetchCharecterAsync.fulfilled, (state, action) => {
    //             state.status = 'idle';
    //             state.allCharecters = action.payload;
    //         })
    //         .addCase(fetchCharecterAsync.rejected, (state) => {
    //             state.status = 'failed';
    //         });
    // },
});



// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const totalCharecterCount = (state: RootState) => state.charecters.totalCharecterCount;

export default charecterSlice.reducer; // This is for configureStore
